<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Encounters with the World Wild Web</title>
    <link>http://localhost/tags/java/</link>
    <description>Recent content in Java on Encounters with the World Wild Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Jan 2011 14:30:53 +0000</lastBuildDate>
    <atom:link href="http://localhost/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Utilisation de GoogleMaps en Java</title>
      <link>http://localhost/2011/01/utilisation-de-googlemaps-en-java/</link>
      <pubDate>Sun, 09 Jan 2011 14:30:53 +0000</pubDate>
      
      <guid>http://localhost/2011/01/utilisation-de-googlemaps-en-java/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Cet article s&amp;#8217;adresse aux développeurs cherchant intégrer un système cartographique dans leur application Java. Vous trouverez ci-bas les résultats de mes recherches effectués lors de mes charges de laboratoire du cours &lt;a href=&#34;https://cours.etsmtl.ca/log210/&#34;&gt;Analyse et Conception de Logiciel&lt;/a&gt; &lt;a href=&#34;http://www.etsmtl.ca/&#34;&gt;l&amp;#8217;École de Technologie Supérieure (ÉTS)&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;survol-des-possibilités-étudiées&#34;&gt;Survol des possibilités étudiées&lt;/h2&gt;

&lt;p&gt;Voici un schéma qui résume les options possibles. La légende est la suivante : en vert les options faciles, en orange difficulté moyenne, en rouge non-recommandée, et en grisées les options non explorées lors de cette recherche.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost/asset/2011/01/sommaire_gmap_options2.png&#34; title=&#34;sommaire_gmap_options2&#34; width=&#34;700&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;détails&#34;&gt;Détails&lt;/h2&gt;

&lt;p&gt;Voici un tableaux résumant les entrées et sorties pour chacune des méthodes :&lt;/p&gt;

&lt;table width=&#34;100%&#34;&gt;
  &lt;tr&gt;
    &lt;th&gt;
      Méthode
    &lt;/th&gt;
    &lt;th&gt;
      Entrées
    &lt;/th&gt;
    &lt;th&gt;
      Sorties
    &lt;/th&gt;
    &lt;th&gt;
      Autres compétences requises
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      SWT
    &lt;/td&gt;
    &lt;td&gt;
      JavaScript ou URL
    &lt;/td&gt;
    &lt;td&gt;
      HTML
    &lt;/td&gt;
    &lt;td&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      DJ NativeSwing
    &lt;/td&gt;
    &lt;td&gt;
      JavaScript ou URL
    &lt;/td&gt;
    &lt;td&gt;
      HTML
    &lt;/td&gt;
    &lt;td&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      QT Jambi
    &lt;/td&gt;
    &lt;td&gt;
      JavaScript ou URL
    &lt;/td&gt;
    &lt;td&gt;
      HTML
    &lt;/td&gt;
    &lt;td&gt;
      QT
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Projet Web
    &lt;/td&gt;
    &lt;td&gt;
      JavaScript ou URL
    &lt;/td&gt;
    &lt;td&gt;
      HTML
    &lt;/td&gt;
    &lt;td&gt;
      HTML, CSS, Programmation serveur (PHP,JSP,etc.)
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Static Maps API + KML
    &lt;/td&gt;
    &lt;td&gt;
      KML
    &lt;/td&gt;
    &lt;td&gt;
      Image
    &lt;/td&gt;
    &lt;td&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Static Maps API + HTTP
    &lt;/td&gt;
    &lt;td&gt;
      String
    &lt;/td&gt;
    &lt;td&gt;
      Image
    &lt;/td&gt;
    &lt;td&gt;
      HTTP et (XML ou JSON)
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      GWT
    &lt;/td&gt;
    &lt;td&gt;
      String
    &lt;/td&gt;
    &lt;td&gt;
      HTML
    &lt;/td&gt;
    &lt;td&gt;
      Google Web Toolkit (GWT)
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Flash
    &lt;/td&gt;
    &lt;td&gt;
      String
    &lt;/td&gt;
    &lt;td&gt;
      Flash
    &lt;/td&gt;
    &lt;td&gt;
      ActionScript (AS3)
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;navigateur-web-embarqué&#34;&gt;Navigateur web embarqué&lt;/h3&gt;

&lt;p&gt;Dans cette solution, il s&amp;#8217;agit d&amp;#8217;utiliser un des différents contrôles Web existants et d&amp;#8217;incorporer carrément un navigateur web dans l&amp;#8217;application. Par la suite il suffit d&amp;#8217;utiliser JavaScript ou d&amp;#8217;envoyer les bons paramètres dans l&amp;#8217;URL pour afficher les directions.&lt;/p&gt;

&lt;p&gt;Si j&amp;#8217;avais construire une application de bureau professionnelle, je choisirait le &lt;a href=&#34;http://code.google.com/apis/maps/documentation/flash/&#34;&gt;Maps API for Flash&lt;/a&gt; (via Adobe Air) si possible car la librairie est très stable ou j&amp;#8217;explorerais les possibilités avec le &lt;a href=&#34;http://www.google.com/mobile/maps/&#34;&gt;Google Maps for Mobile&lt;/a&gt; (&lt;a href=&#34;http://www.java.com/en/java_in_action/google_maps.jsp&#34;&gt;recommandé par Sun&lt;/a&gt;) ou la &lt;a href=&#34;http://worldwind.arc.nasa.gov/java/index.html&#34;&gt;NASA World Wind&lt;/a&gt; (&lt;a href=&#34;http://worldwind.arc.nasa.gov/java/demos/&#34;&gt;demos&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&#34;qt-jambi&#34;&gt;QT Jambi&lt;/h3&gt;

&lt;p&gt;QT est une librairie graphique (&lt;em&gt;GUI framework&lt;/em&gt;) c++, open source et multiplateforme (windows, mac, linux, mobile), développée par Nokia. QT Jambi est un &amp;#8220;port&amp;#8221; de la librairie QT pour Java. Pas besoin de QT pour utiliser QT Jambi, il suffit de télécharger les &lt;a href=&#34;http://sourceforge.net/projects/qtjambi/files/4.5.2/&#34;&gt;bindings pour votre système&lt;/a&gt; et le &lt;a href=&#34;http://qt.nokia.com/developer/eclipse-integration&#34;&gt;QT Eclipse Integration for Jambi (Java) Plugin&lt;/a&gt;. Notez que pour l&amp;#8217;installation du plugin Eclipse sur Windows 64 bits, il faut télécharger les 2 fichiers mentionnés ci-haut en 32 bits.&lt;/p&gt;

&lt;p&gt;Voir mon article précédent pour voir &lt;a href=&#34;http://localhost/2010/02/how-to-use-qt-jambi-from-within-eclipse/&#34; title=&#34;How to use QT Jambi from within Eclipse&#34;&gt;comment utiliser QT Jambi dans Eclipse&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;sortie-html&#34;&gt;Sortie HTML&lt;/h3&gt;

&lt;p&gt;L&amp;#8217;avantage d&amp;#8217;avoir une sortie HTML est qu&amp;#8217;il est possible de ré-utiliser les widgets du site de Google Maps. Par contre, l&amp;#8217;intégration d&amp;#8217;un navigateur embarqué dans les applications de bureau (ie: traditionnelle) frôle le &lt;a href=&#34;http://code.google.com/apis/maps/faq.html#mapsformobile&#34;&gt;bris de la license de Google&lt;/a&gt;. Toutefois, cela est parfaitement légal pour la création d&amp;#8217;un site internet.&lt;/p&gt;

&lt;h3 id=&#34;maps-data-api&#34;&gt;Maps Data API&lt;/h3&gt;

&lt;p&gt;J&amp;#8217;ai perdu plusieurs heures infructueuses avec l&amp;#8217;API officielle de Google (&lt;a href=&#34;http://code.google.com/apis/maps/documentation/mapsdata/&#34;&gt;Maps Data API&lt;/a&gt;, maintenant désuète). Les exemples officiels requièrent l&amp;#8217;installation d&amp;#8217;un grand nombre de librairies mal documentées &amp;#8211; laissez-moi savoir si vous y arrivez. J&amp;#8217;ai alors cherché pour un autre exemple qui me semblait complet (dont j&amp;#8217;ai perdu l&amp;#8217;adresse), mais sa compilation provoquait une erreur de signature dans l&amp;#8217;appel d&amp;#8217;une des classes de l&amp;#8217;API.&lt;/p&gt;

&lt;h3 id=&#34;point-de-départ-pour-la-solution-avec-microsoft&#34;&gt;Point de départ pour la solution avec Microsoft&lt;/h3&gt;

&lt;p&gt;(&lt;a href=&#34;http://stackoverflow.com/questions/996954/java-api-for-google-maps-or-similar&#34;&gt;source&lt;/a&gt;) : Microsoft has a collaboration with USGS at &lt;a rel=&#34;nofollow&#34; href=&#34;http://terraserver-usa.com/&#34;&gt;&lt;a href=&#34;http://terraserver-usa.com/&#34;&gt;http://terraserver-usa.com/&lt;/a&gt;&lt;/a&gt;. There is a &lt;a rel=&#34;nofollow&#34; href=&#34;http://terraserver-usa.com/webservices.aspx&#34;&gt;freely available web service&lt;/a&gt; with a &lt;a rel=&#34;nofollow&#34; href=&#34;http://terraserver-usa.com/TerraService2.asmx&#34;&gt;WSDL&lt;/a&gt;. You can use common Java WSDL binding libraries like &lt;a rel=&#34;nofollow&#34; href=&#34;http://ws.apache.org/axis2/&#34;&gt;Axis&lt;/a&gt; or &lt;a rel=&#34;nofollow&#34; href=&#34;http://cxf.apache.org/&#34;&gt;CXF&lt;/a&gt; to create java object to access the service.&lt;/p&gt;

&lt;h3 id=&#34;static-maps-api-http&#34;&gt;Static Maps API + HTTP&lt;/h3&gt;

&lt;p&gt;Voici un extrait de code pour cette solution :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**
 * Copyright (c) 2010, Maxime Caumartin, David Martineau
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the names of the developpers nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS&#39;&#39; AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package ca.etsmtl.log210.laboratoire1.GIS;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.LinkedHashMap;
import utilities.json.JSONArray;
import utilities.json.JSONException;
import utilities.json.JSONObject;
import utilities.json.JSONTokener;
import utilities.polylineEncoder.PolylineEncoder;
import utilities.polylineEncoder.Track;
import utilities.polylineEncoder.Trackpoint;
import ca.etsmtl.log210.laboratoire1.modele.GestionnaireGIS;
public class GoogleMapProvider implements GestionnaireGIS {
  private HashMap&amp;lt;String, String&amp;gt; chose = new LinkedHashMap&amp;lt;String, String&amp;gt;();
  private HashMap&amp;lt;String, String&amp;gt; autreChose = new HashMap&amp;lt;String, String&amp;gt;();
  private Dimension dimmensionCarte;
  private URL polyencodedMap;
  // [...]
  @Override
  public Image getImage() throws IOException, InvalidLocalisationException {
    StringBuffer b = new StringBuffer(50);
    Image img;
    for (String s : chose.keySet())
      b.append(s).append(&#39;\n&#39;);
    if ((img = cache.get(b.toString())) == null)
    {
    JSONTokener token = null;
    URL u;
    URLConnection c;
    try
    {
      Track t = new Track();
      for(int i = 0; i &amp;lt; getLieux().length-1; i++){
        u = new URL(&amp;quot;http://maps.google.com/maps/nav?q=from:&amp;quot;+URLEncoder.encode(getLieux()[i], &amp;quot;UTF-8&amp;quot;)+&amp;quot;%20to:&amp;quot;+URLEncoder.encode(getLieux()[i+1], &amp;quot;UTF-8&amp;quot;));
        c = u.openConnection();
        // Je suis un navigateur web et mon nom est Firefox 3.6
        c.setRequestProperty(&amp;quot;User-Agent&amp;quot;, &amp;quot;Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2) Gecko/20100122 Fedora/3.6.1-1.fc13 Firefox/3.6&amp;quot;);
        c.setRequestProperty(&amp;quot;Accept&amp;quot;, &amp;quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&amp;quot;);
        c.setRequestProperty(&amp;quot;Accept-Language&amp;quot;, &amp;quot;fr-ca,en;q=0.5&amp;quot;);
        InputStreamReader ob = new InputStreamReader (c.getInputStream());
        token = new JSONTokener(ob);
        JSONObject o = new JSONObject(token);
        // Dans le protocole HTTP, 200 signifie que notre requete a ete executee avec succes
        if (o.getJSONObject(&amp;quot;Status&amp;quot;).getInt(&amp;quot;code&amp;quot;) != 200)
          throw new InvalidLocalisationException();
        JSONArray arrDep = o.getJSONArray(&amp;quot;Placemark&amp;quot;);
        JSONObject o1 = (JSONObject) arrDep.get(0);
        t.addTrackpoint(getTractPointFromJSON(o1));
        JSONArray dir = o.getJSONObject(&amp;quot;Directions&amp;quot;).getJSONArray(&amp;quot;Routes&amp;quot;)
          .getJSONObject(0).getJSONArray(&amp;quot;Steps&amp;quot;);
        for (int j = 0 ; j &amp;lt; dir.length(); j++)
          t.addTrackpoint(getTractPointFromJSON((JSONObject)dir.get(j)));
        t.addTrackpoint(getTractPointFromJSON((JSONObject)arrDep.get(1)));
      }
      HashMap&amp;lt;?, ?&amp;gt; hm = PolylineEncoder.createEncodings(t, 10, 1);
      polyencodedMap = new URL(generatePolyencodedMapURL(hm));
    }
    catch (JSONException e)
    {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
      img = Toolkit.getDefaultToolkit().createImage(polyencodedMap);
      cache.put(b.toString(), img);
    }
    return  img;
  }
  public String generatePolyencodedMapURL(HashMap&amp;lt;?, ?&amp;gt; hm) throws UnsupportedEncodingException{
    String polyEncURL;
    //&amp;quot;http://maps.google.com/maps/api/staticmap?sensor=false&amp;amp;size=800x800&amp;amp;markers=color:blue                     |label:D|H3C+1K3          &amp;amp;markers=color:blue                    |label:F|&amp;lt;Destination!&amp;gt;                     &amp;amp;maptype=roadmap&amp;amp;format=png32&amp;amp;path=weight:5                     |color:blue                  |enc&amp;quot;+hm.keySet().iterator().next().toString()
    polyEncURL = &amp;quot;http://maps.google.com/maps/api/staticmap?sensor=false&amp;amp;size=1280x1024&amp;amp;&amp;quot;+generatePolylineMarkers()+&amp;quot;maptype=roadmap&amp;amp;format=png32&amp;amp;path=weight:&amp;quot;+getLargeurChemin()+&amp;quot;|color:&amp;quot;+getCouleurChemin()+&amp;quot;|enc:&amp;quot; + hm.values().iterator().next().toString();
    return polyEncURL;
  }
  public String generatePolylineMarkers() throws UnsupportedEncodingException{
    String polyMarkers = &amp;quot;&amp;quot;;
    for(int i = 0; i &amp;lt; getLieux().length; i++){
      polyMarkers = polyMarkers + &amp;quot;markers=color:&amp;quot;+getCouleurMarqueur()+&amp;quot;|label:&amp;quot;+this.chose.get(getLieux()[i])+&amp;quot;|&amp;quot;+URLEncoder.encode(getLieux()[i], &amp;quot;UTF-8&amp;quot;)+&amp;quot;&amp;amp;#038;&amp;quot;;
    }
    return polyMarkers;
  }
  private static Trackpoint getTractPointFromJSON(JSONObject o1) throws JSONException
  {
    JSONObject o2 = o1.getJSONObject(&amp;quot;Point&amp;quot;);
    JSONArray coor1 = o2.getJSONArray(&amp;quot;coordinates&amp;quot;);
    return new Trackpoint(coor1.getDouble(1), coor1.getDouble(0), coor1.getDouble(2));
  }
  @Override
  public String[] getLieux() {
    int i = 0;
    String [] tmpStringArray = new String[chose.keySet().size()];
    for (String s : chose.keySet())
      tmpStringArray[i++] = s;
    return tmpStringArray;
  }
  // [...]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;références&#34;&gt;Références&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mapki.com/wiki/Google_Map_Parameters&#34;&gt;Google Maps Parameters (quoi passer dans l&amp;#8217;URL)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/apis/maps/documentation/javascript/&#34;&gt;Google Maps JavaScript API v3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/apis/maps/documentation/directions/&#34;&gt;Google Directions API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/apis/maps/documentation/staticmaps/&#34;&gt;Google Static Maps API V2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/apis/maps/documentation/webservices/&#34;&gt;Google Maps API Web Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/apis/maps/documentation/geocoding/&#34;&gt;Service de conversion d&amp;#8217;une adresse en KML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eclipse.org/swt/snippets/&#34;&gt;SWT Code Snippets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.qt.nokia.com/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-index.html&#34;&gt;QT Jambi 4.5.2 Reference Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.qt.nokia.com/qtjambi-4.5.2_01/index.html&#34;&gt;QT Jambi 4.5.2 API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.qt.nokia.com/4.7/index.html&#34;&gt;QT 4.7.1 Reference Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.qt.nokia.com/4.7/classes.html&#34;&gt;QT 4.7.1 API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://claudiushauptmann.com/tutorial-google-maps-with-java-gwt-and-eclipse.html&#34;&gt;Tutorial: Google Maps with Java, GWT and Eclipse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://djproject.sourceforge.net/ns/&#34;&gt;DJ NativeSwing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/apis/maps/documentation/flash/&#34;&gt;Google Maps API for Flash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.google.com/mobile/maps/&#34;&gt;Google Maps for Mobile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://worldwind.arc.nasa.gov/java/index.html&#34;&gt;NASA World Wind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.mapquest.com/&#34;&gt;MapQuest Developer Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.microsoft.com/maps/developers/web.aspx&#34;&gt;Microsoft Bing Maps Developer Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;crédits&#34;&gt;Crédits&lt;/h2&gt;

&lt;p&gt;Merci à Maxime de Caumartin pour la contribution de son code Java pour le GoogleMapProvider, et aux autres étudiants pour leurs contributions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to use QT Jambi from within Eclipse</title>
      <link>http://localhost/2010/02/how-to-use-qt-jambi-from-within-eclipse/</link>
      <pubDate>Sun, 21 Feb 2010 14:16:46 +0000</pubDate>
      
      <guid>http://localhost/2010/02/how-to-use-qt-jambi-from-within-eclipse/</guid>
      <description>

&lt;p&gt;This article is part 2 / 2 of using QT Jambi within Eclipse. &lt;a href=&#34;http://localhost/2010/01/getting-started-with-qt-jambi-on-linux/&#34; title=&#34;Getting started with QT Jambi on Linux&#34;&gt;Click here to read the first part of this article, &amp;#8220;Getting started with QT Jambi on Linux&amp;#8221;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The present article you will learn how to design forms within eclipse and structure your QT code using the MVC pattern :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;File &amp;gt; New &amp;gt; Other &amp;gt; Qt Jambi Project (Using Designer Form) &lt;img src=&#34;http://localhost/asset/2010/2/21/jambi_new_project.jpg&#34; alt=&#34;&#34; width=&#34;421&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Name it JambiWeb&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a new QT Jambi Designer Form and ajust settings like on screenshot. &lt;img src=&#34;http://localhost/asset/2010/2/21/jambi_new_template_class.jpg&#34; alt=&#34;&#34; width=&#34;421&#34; height=&#34;371&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This will create 3 files :&lt;/p&gt;

&lt;p&gt;|File|Description|
|&amp;ndash;|&amp;ndash;|
| &lt;code&gt;src/views/WebView.jui&lt;/code&gt; | XML used by the Designer |
| &lt;code&gt;src/views/WebView.java&lt;/code&gt; | This is the view from the MVC concept, it displays the widgets contained in &lt;code&gt;Ui_WebView.java&lt;/code&gt; |
| &lt;code&gt;src/ui/views/Ui_WebView.java&lt;/code&gt; | Java file generated from the XML (you should not edit this file because it will be automatically replaced when you make changes to the form in the Designer). This file is more like a container for the widgets in the form, it does &lt;em&gt;not&lt;/em&gt; displays the elements. |&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now in order to respect the MVC pattern, the view should not display itself, but rather we should have a controller to trigger the display of the view. Add WebController class in the controllers package and insert this code :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package controllers;
    
import views.WebView;
import com.trolltech.qt.gui.QApplication;

public class WebController {
private WebView webView;

private Ui_WebView ui() { return webView.ui(); }

public static void main(String[] args) {
new WebController(args);
}

public WebController(String[] args) {
QApplication.initialize(args);

webView = new WebView(null);
webView.show();

initEvents();

QApplication.exec();
}

private void initEvents() {
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now delete the main() method in &lt;code&gt;views/WebView.java&lt;/code&gt;, and the contents should be as follow:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package views;&amp;amp;nbsp;

import com.trolltech.qt.gui.*;

public class WebView extends QMainWindow {
private Ui_WebView ui = new Ui_WebView();

public Ui_WebView ui() { return this.ui; }

public WebView(QWidget parent) {
super(parent);
ui.setupUi(this);

setWindowTitle(&amp;quot;A custom browser for your application&amp;quot;);
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next let&amp;#8217;s design our interface&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open on views/WebView.jui and choose the &amp;#8220;QT Designer UI Perspective&amp;#8221;. This perspective should bring you a 3-tabbed panel on the right side of Eclipse view.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;So choose &amp;#8220;QT Object Inspector&amp;#8221; tab and right click on your QMainWindow item and choose &amp;#8220;add toolbar&amp;#8221;. &lt;img src=&#34;http://localhost/asset/2010/2/21/jambi_add_toolbar.jpg&#34; alt=&#34;&#34; width=&#34;1008&#34; height=&#34;630&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the bottom of the screen, choose the &amp;#8220;QT Action Editor&amp;#8221; tab, and 2 actions (Reload, Stop), and drag &amp;amp; drop them unto the toolbar you are designing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next choose &amp;#8220;QT Widget Box&amp;#8221; tab.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a QWebView widget and name it &amp;#8220;browser&amp;#8221; (using QT Object Inspector tab)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a QLineEdit widget anywhere in the window &amp;#8211; we&amp;#8217;ll add it to the toolbar manually.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Your view should be looking like this : &lt;img src=&#34;http://localhost/asset/2010/2/21/jambi_add_action_to_toolbar.jpg&#34; alt=&#34;&#34; width=&#34;1008&#34; height=&#34;630&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save &lt;code&gt;WebView.jui&lt;/code&gt; and go back to the Java perspective to add these lines to &lt;code&gt;views/WebView.java&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public WebView(QWidget parent) {
    // ...
    ui.toolBar.addWidget( ui.urlEdit );
    ui.toolBar.setFloatable(false);
    ui.toolBar.setMovable(false);
}

public Signal0 closed = new Signal0();

@Override
protected void closeEvent(QCloseEvent event) {
    this.closed.emit();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;And let&amp;#8217;s add code to handle the events in &lt;code&gt;controllers/WebController.java&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void initEvents() {
    ui().actionReload.triggered.connect(this, &amp;quot;onReloadClicked()&amp;quot;);
    ui().actionStop.triggered.connect(this, &amp;quot;onStopClicked()&amp;quot;);

    ui().urlEdit.returnPressed.connect(this, &amp;quot;onUrlEditReturnPressed()&amp;quot;);

    ui().browser.loadStarted.connect(this, &amp;quot;onLoadStarted()&amp;quot;);
    ui().browser.loadProgress.connect(this, &amp;quot;onLoadProgress(int)&amp;quot;);
    ui().browser.loadFinished.connect(this, &amp;quot;onLoadDone()&amp;quot;);
    ui().browser.urlChanged.connect(this, &amp;quot;onUrlChanged(QUrl)&amp;quot;);

    webView.closed.connect(this, &amp;quot;onClosed()&amp;quot;);
}

private void openURL() {
    String text = ui().urlEdit.text();

    if (text.indexOf(&amp;quot;://&amp;quot;) &amp;amp;lt; 0)
    text = &amp;quot;http://&amp;quot; + text;

    ui().browser.load(new QUrl(text));
}

private void onReloadClicked() {
    ui().browser.reload();
}

private void onStopClicked() {
    ui().browser.stop();
}

private void onUrlEditReturnPressed() {
    openURL();
}

private void onUrlChanged(QUrl url) {
    ui().urlEdit.setText(url.toString());
}

private void onLoadStarted() {
    ui().statusbar.showMessage(&amp;quot;Starting to load: &amp;quot; + ui().urlEdit.text());
}

private void onLoadDone() {
    ui().statusbar.showMessage(&amp;quot;Loading done...&amp;quot;);
}

private void onLoadProgress(int x) {
    ui().statusbar.showMessage(&amp;quot;Loading: &amp;quot; + x + &amp;quot; %&amp;quot;);
}

private void onClosed() {
    ui().browser.loadProgress.disconnect(this);
    ui().browser.loadFinished.disconnect(this);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the code above you have an exemple of a custom signal (QT&amp;#8217;s observer/observable pattern). Here is how it works : when &lt;code&gt;QMainWindow::closeEvent()&lt;/code&gt; is triggered by QT when the user closes the app, we then delegates the information to the WebController via the signal &lt;code&gt;WebView::closed&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;. For more details refer to &lt;a href=&#34;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-signalsandslots.html&#34;&gt;QT Jambi article on signals &amp;amp; slots&lt;/a&gt;.&lt;/li&gt; &lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;But wait a minute! Cool application use icons not text in the toolbar! Yes you can!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download these two images ( &lt;img style=&#34;width:32px&#34; src=&#34;http://localhost/asset/2010/2/21/refresh32.png&#34; /&gt;, &lt;img style=&#34;width:32px&#34; src=&#34;http://localhost/asset/2010/2/21/stop32.png&#34; /&gt;) and save them in a directory named &amp;#8220;images&amp;#8221; in your eclipse project.&lt;/li&gt;
&lt;li&gt;Next add your images directory in your classpath: Project &amp;gt; Properties &amp;gt; Java Build Path &amp;gt; Librairies &amp;gt; Add Class Folder = &amp;#8220;images&amp;#8221;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add set the icon manually in views/WebView.java :&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Read on the &lt;a href=&#34;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-resourcesystemoverview.html&#34;&gt;QT Resource system&lt;/a&gt; to understand how this works.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here you go! I hope this article will be usefull to someone!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost/asset/2010/2/21/JambiWeb.zip&#34;&gt;final source code for this application&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-hellowebkit-code.html&#34;&gt;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-hellowebkit-code.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-resourcesystem.html&#34;&gt;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-resourcesystem.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with QT Jambi on Linux</title>
      <link>http://localhost/2010/01/getting-started-with-qt-jambi-on-linux/</link>
      <pubDate>Thu, 21 Jan 2010 14:04:09 +0000</pubDate>
      
      <guid>http://localhost/2010/01/getting-started-with-qt-jambi-on-linux/</guid>
      <description>

&lt;p&gt;In this article I&amp;#8217;ll explain how to install QT Jambi and write your first Hello world program.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Installation of QT Jambi SDK&lt;/li&gt;
&lt;li&gt;Quick Overview of the SDK&lt;/li&gt;
&lt;li&gt;Integration with Eclipse&lt;/li&gt;
&lt;li&gt;Your first Jambi Program&lt;/li&gt;
&lt;li&gt;Jambi Links&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;installation-of-qt-jambi-sdk&#34;&gt;Installation of QT Jambi SDK&lt;/h2&gt;

&lt;p&gt;First, you need to download the &amp;#8220;Qt Jambi &amp;#8211; Java bindings Binaries&amp;#8221; for your OS (about 100MB), get it from� &lt;a href=&#34;http://qt.nokia.com/downloads&#34;&gt;here&lt;/a&gt;. Since I am using Ubuntu, the following instructions will be for Linux. You can extract the archive where you want, but remember the path because we&amp;#8217;ll need it later on &amp;#8211; I&amp;#8217;ll refer to ita s JAMBI_PATH (/usr/local/lib/qtjambi-linux32-lgpl-4.5.2_01 in this example).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar -xzf qtjambi-linux32-lgpl-4.5.2_01.tar.gz
sudo mv qtjambi-linux32-lgpl-4.5.2_01 /usr/local/lib/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we need to create a script to get QT Designer to generate .jui files for Java (instead QT/C++ .ui files). Name it jambi-designer.sh and insert the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd JAMBI_PATH
export CLASSPATH=`pwd`/qtjambi-4.5.2_01.jar:`pwd`/qtjambi-examples-4.5.2_01.jar:`pwd`/qtjambi-linux32-gcc-4.5.2_01.jar
export JAVADIR=/usr/lib/jvm/java-6-sun/jre
./designer.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make it executable and make it available in your path. Copy also the juic (jambi user interface compiler) which is used to convert the files generated by the Designer to java code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo chmod a+x jambi-designer.sh
sudo ln -s /JAMBI_PATH/jambi-designer.sh  /usr/local/bin/jambi-designer
cp bin/juic /usr/local/bin/
# try it :
jambi-designer  &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;quick-overview-of-the-sdk&#34;&gt;Quick Overview of the SDK&lt;/h2&gt;

&lt;p&gt;So here you go you got the SDK installed. Now what are these files, do i need to install this huge file on every computer my program will run unto?? Obviously not!&lt;/p&gt;

&lt;p&gt;Well here, you to remember that when you&amp;#8217;ll distribute your application, you&amp;#8217;ll need to bundle it with the Jambi core package (qtjambi-4.5.2_01.jar) and the jambi os-dependant package (qtjambi-linux32-gcc-4.5.2_01.jar). That&amp;#8217;s it!&lt;/p&gt;

&lt;p&gt;If you want the application to run on Windows as well, you only need to add one jar file per os (you&amp;#8217;ll need to download the whole sdk just to get the .jar your need for each os).&lt;/p&gt;

&lt;p&gt;What else am I getting?&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;
      Directory / file
    &lt;/th&gt;
    &lt;th&gt;
      Details
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      bin
    &lt;/td&gt;
    &lt;td&gt;
      Designer and UI Compiler binaries
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      com/trolltech/
    &lt;/td&gt;
    &lt;td&gt;
      Jambi Core &amp; Examples Source code
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      doc/
    &lt;/td&gt;
    &lt;td&gt;
      Jambi HTML Documentation (use your browser)
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      qtjambi.sh
    &lt;/td&gt;
    &lt;td&gt;
      Execute this script to view the numeros code samples
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost/asset/2010/2/21/jambi_examples.jpg&#34; alt=&#34;&#34; width=&#34;442&#34; height=&#34;354&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;integration-with-eclipse&#34;&gt;Integration with Eclipse&lt;/h2&gt;

&lt;p&gt;So you want code auto-completion for Jambi classes in Eclipse? You&amp;#8217;re dreaming! Nope, actually you can! Just download the &amp;#8220;eclipse integration package&amp;#8221; and extract it in the plugin directory of your Eclipse installation.&lt;/p&gt;

&lt;p&gt;Note : I haven&amp;#8217;t been able to install the integration plugin with default Eclipse package in Kubuntu 9.10 because it does not allow you to add plugins as root. So to get around this, just uninstall it from the package manager and install it manually (get &lt;a href=&#34;http://www.eclipse.org/downloads/&#34;&gt;eclipse here&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar -xzf eclipse-java-galileo-SR1-linux-gtk.tar.gz
sudo mv eclipse /opt/eclipse-3.5.1
cd /opt/eclipse-3.5.1
sudo tar -xzf /path/to/qtjambi-eclipse-integration-linux32-4.5.2_01.tar.gz
./eclipse -clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next on Eclipse restart, go to Window &amp;gt; Preferences &amp;gt; QT Jambi Preference Page and use these settings :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jambi Location = where you installed the first archive (JAMBI_PATH)&lt;/li&gt;
&lt;li&gt;Generate files in separate folder = src/ui&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;your-first-jambi-program&#34;&gt;Your first Jambi Program&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Click on File &amp;gt; New &amp;gt; Other &amp;gt; QT Jambi Project.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a new class named &amp;#8220;HelloWorld&amp;#8221; and insert this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.trolltech.qt.gui.*;

public class HelloWorld extends QWidget{

    public static void main(String[] args) {
        // Instanciates a Jambi Application and pass it the command-line arguments to allow the QApplication
        // static instance to handle the arguments it recognizes, such as -font and -style.
        QApplication.initialize(args);

        // Creates an instance of our QWidget (could be also a QMainWindow, QDialog, etc.)
        // and set the parent to null
        HelloWorld helloWorld = new HelloWorld(null);

        // Create a new label and sets its parent to our view.
        QLabel label = new QLabel(&amp;quot;Ping World!&amp;quot;, helloWorld);

        // Show our view
        helloWorld.show();

        // Execute Jambi Application
        QApplication.exec();
    }

    public HelloWorld(QWidget parent){
        super(parent);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;jambi-links&#34;&gt;Jambi Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-index.html&#34;&gt;Jambi Documentation&lt;/a&gt; (&amp;#8220;Signals and Slots&amp;#8221; is a recommanded reading)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qt.nokia.com/doc/qtjambi-4.5.2_01/index.html&#34;&gt;Jambi Classes javadoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;file:///usr/local/lib/qtjambi-linux32-lgpl-4.5.2_01/doc/html/index.html&#34;&gt;file:///usr/local/lib/qtjambi-linux32-lgpl-4.5.2_01/doc/html/index.html&lt;/a&gt; (same as above but on your computer)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.trolltech.com/4.5/index.html&#34;&gt;C++ QT Documentation&lt;/a&gt; (the API is the same and sometimes you find more information than on Jambi)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.informit.com/articles/article.aspx?p=1405564&#34;&gt;Getting Started Article by Jasmin Blanchette&lt;/a&gt; (including a part on how to integrate C++ components with QT Jambi)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-examples.html&#34;&gt;Jambi Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>