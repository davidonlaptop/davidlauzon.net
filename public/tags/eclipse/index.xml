<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eclipse on Encounters with the World Wild Web</title>
    <link>https://davidonlaptop.github.io/davidlauzon.net/tags/eclipse/</link>
    <description>Recent content in Eclipse on Encounters with the World Wild Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Feb 2010 14:25:25 +0000</lastBuildDate>
    <atom:link href="https://davidonlaptop.github.io/davidlauzon.net/tags/eclipse/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Use svn with Eclipse Galileo on Ubuntu 9.10</title>
      <link>https://davidonlaptop.github.io/davidlauzon.net/2010/02/use-svn-with-eclipse-galileo-on-ubuntu-9-10/</link>
      <pubDate>Sat, 27 Feb 2010 14:25:25 +0000</pubDate>
      
      <guid>https://davidonlaptop.github.io/davidlauzon.net/2010/02/use-svn-with-eclipse-galileo-on-ubuntu-9-10/</guid>
      <description>&lt;p&gt;After wasting a lot of time myself, I thought this could serve some other people&amp;#8230;&lt;/p&gt;

&lt;p&gt;So here&amp;#8217;s how I did it :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First install the Subclipse plugin

&lt;ol&gt;
&lt;li&gt;Run sudo eclipse (that will install plugins system-wide)&lt;/li&gt;
&lt;li&gt;Eclipse &amp;gt; Install new software &amp;gt; Add&lt;/li&gt;
&lt;li&gt;Name = &amp;#8220;whatever&amp;#8221;&lt;/li&gt;
&lt;li&gt;Location = &lt;strong&gt;&lt;a href=&#34;http://subclipse.tigris.org/update_1.6.x&#34;&gt;http://subclipse.tigris.org/update_1.6.x&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;OK&lt;/li&gt;
&lt;li&gt;Work with: &amp;#8220;whatever&amp;#8221;&lt;/li&gt;
&lt;li&gt;Select these to install :

&lt;ul&gt;
&lt;li&gt;CollabNet Merge Client&lt;/li&gt;
&lt;li&gt;Subclipse&lt;/li&gt;
&lt;li&gt;Subclipse Integration for Mylyn 3.x&lt;/li&gt;
&lt;li&gt;Subversion Client Adapter&lt;/li&gt;
&lt;li&gt;Subversion JavaHL Native Library Adapter&lt;/li&gt;
&lt;li&gt;Subversion Revision Graph&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If you get a &amp;#8220;Subversion 1.6 contains a bug that causes Eclipse to crash &amp;#8230;. GNOME keyring &amp;#8230; we recommand &amp;#8230; &amp;#8220;, choose OK.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next install the Java bindings for SVN&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;sudo apt-get install libsvn-java&lt;/li&gt;
&lt;li&gt;Eclipse &amp;gt; Window &amp;gt; Preferences &amp;gt; Team &amp;gt; SVN&lt;/li&gt;
&lt;li&gt;If that triggers a &amp;#8220;Failed to load JavaHL Library.&amp;#8221; error, you need to add libsvnjavahl-1 in the Eclipse path :&lt;/li&gt;
&lt;li&gt;Just throw a symlink into one of the path in the error message :&lt;/li&gt;

&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ln -s /usr/lib/jni/libsvnjavahl-1.so /usr/lib/libsvnjavahl-1.so
         sudo ln -s /usr/lib/jni/libsvnjavahl-1.so.0.0.0 /usr/lib/libsvnjavahl-1.so.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Restart eclipse and step 3 should be solved.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Perhaps you want to use SVN with existing checkout project ?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Right-click on your project in Eclipse&lt;/li&gt;
&lt;li&gt;Team &amp;gt; Share Project &amp;gt; svn &amp;gt; Validate Conneciton on Finish &amp;gt; Finish&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://subclipse.tigris.org/servlets/ProjectProcess?pageID=rr1TIx&#34;&gt;Screenshots of what you can do with Subclipse&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to use QT Jambi from within Eclipse</title>
      <link>https://davidonlaptop.github.io/davidlauzon.net/2010/02/how-to-use-qt-jambi-from-within-eclipse/</link>
      <pubDate>Sun, 21 Feb 2010 14:16:46 +0000</pubDate>
      
      <guid>https://davidonlaptop.github.io/davidlauzon.net/2010/02/how-to-use-qt-jambi-from-within-eclipse/</guid>
      <description>

&lt;p&gt;This article is part 2 / 2 of using QT Jambi within Eclipse. &lt;a href=&#34;https://davidonlaptop.github.io/davidlauzon.net/2010/01/getting-started-with-qt-jambi-on-linux/&#34; title=&#34;Getting started with QT Jambi on Linux&#34;&gt;Click here to read the first part of this article, &amp;#8220;Getting started with QT Jambi on Linux&amp;#8221;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The present article you will learn how to design forms within eclipse and structure your QT code using the MVC pattern :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;File &amp;gt; New &amp;gt; Other &amp;gt; Qt Jambi Project (Using Designer Form) &lt;img src=&#34;https://davidonlaptop.github.io/davidlauzon.net/asset/2010/2/21/jambi_new_project.jpg&#34; alt=&#34;&#34; width=&#34;421&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Name it JambiWeb&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a new QT Jambi Designer Form and ajust settings like on screenshot. &lt;img src=&#34;https://davidonlaptop.github.io/davidlauzon.net/asset/2010/2/21/jambi_new_template_class.jpg&#34; alt=&#34;&#34; width=&#34;421&#34; height=&#34;371&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This will create 3 files :&lt;/p&gt;

&lt;p&gt;|File|Description|
|&amp;ndash;|&amp;ndash;|
| &lt;code&gt;src/views/WebView.jui&lt;/code&gt; | XML used by the Designer |
| &lt;code&gt;src/views/WebView.java&lt;/code&gt; | This is the view from the MVC concept, it displays the widgets contained in &lt;code&gt;Ui_WebView.java&lt;/code&gt; |
| &lt;code&gt;src/ui/views/Ui_WebView.java&lt;/code&gt; | Java file generated from the XML (you should not edit this file because it will be automatically replaced when you make changes to the form in the Designer). This file is more like a container for the widgets in the form, it does &lt;em&gt;not&lt;/em&gt; displays the elements. |&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now in order to respect the MVC pattern, the view should not display itself, but rather we should have a controller to trigger the display of the view. Add WebController class in the controllers package and insert this code :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package controllers;
    
import views.WebView;
import com.trolltech.qt.gui.QApplication;

public class WebController {
private WebView webView;

private Ui_WebView ui() { return webView.ui(); }

public static void main(String[] args) {
new WebController(args);
}

public WebController(String[] args) {
QApplication.initialize(args);

webView = new WebView(null);
webView.show();

initEvents();

QApplication.exec();
}

private void initEvents() {
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now delete the main() method in &lt;code&gt;views/WebView.java&lt;/code&gt;, and the contents should be as follow:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package views;&amp;amp;nbsp;

import com.trolltech.qt.gui.*;

public class WebView extends QMainWindow {
private Ui_WebView ui = new Ui_WebView();

public Ui_WebView ui() { return this.ui; }

public WebView(QWidget parent) {
super(parent);
ui.setupUi(this);

setWindowTitle(&amp;quot;A custom browser for your application&amp;quot;);
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next let&amp;#8217;s design our interface&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open on views/WebView.jui and choose the &amp;#8220;QT Designer UI Perspective&amp;#8221;. This perspective should bring you a 3-tabbed panel on the right side of Eclipse view.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;So choose &amp;#8220;QT Object Inspector&amp;#8221; tab and right click on your QMainWindow item and choose &amp;#8220;add toolbar&amp;#8221;. &lt;img src=&#34;https://davidonlaptop.github.io/davidlauzon.net/asset/2010/2/21/jambi_add_toolbar.jpg&#34; alt=&#34;&#34; width=&#34;1008&#34; height=&#34;630&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the bottom of the screen, choose the &amp;#8220;QT Action Editor&amp;#8221; tab, and 2 actions (Reload, Stop), and drag &amp;amp; drop them unto the toolbar you are designing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next choose &amp;#8220;QT Widget Box&amp;#8221; tab.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a QWebView widget and name it &amp;#8220;browser&amp;#8221; (using QT Object Inspector tab)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a QLineEdit widget anywhere in the window &amp;#8211; we&amp;#8217;ll add it to the toolbar manually.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Your view should be looking like this : &lt;img src=&#34;https://davidonlaptop.github.io/davidlauzon.net/asset/2010/2/21/jambi_add_action_to_toolbar.jpg&#34; alt=&#34;&#34; width=&#34;1008&#34; height=&#34;630&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save &lt;code&gt;WebView.jui&lt;/code&gt; and go back to the Java perspective to add these lines to &lt;code&gt;views/WebView.java&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public WebView(QWidget parent) {
    // ...
    ui.toolBar.addWidget( ui.urlEdit );
    ui.toolBar.setFloatable(false);
    ui.toolBar.setMovable(false);
}

public Signal0 closed = new Signal0();

@Override
protected void closeEvent(QCloseEvent event) {
    this.closed.emit();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;And let&amp;#8217;s add code to handle the events in &lt;code&gt;controllers/WebController.java&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void initEvents() {
    ui().actionReload.triggered.connect(this, &amp;quot;onReloadClicked()&amp;quot;);
    ui().actionStop.triggered.connect(this, &amp;quot;onStopClicked()&amp;quot;);

    ui().urlEdit.returnPressed.connect(this, &amp;quot;onUrlEditReturnPressed()&amp;quot;);

    ui().browser.loadStarted.connect(this, &amp;quot;onLoadStarted()&amp;quot;);
    ui().browser.loadProgress.connect(this, &amp;quot;onLoadProgress(int)&amp;quot;);
    ui().browser.loadFinished.connect(this, &amp;quot;onLoadDone()&amp;quot;);
    ui().browser.urlChanged.connect(this, &amp;quot;onUrlChanged(QUrl)&amp;quot;);

    webView.closed.connect(this, &amp;quot;onClosed()&amp;quot;);
}

private void openURL() {
    String text = ui().urlEdit.text();

    if (text.indexOf(&amp;quot;://&amp;quot;) &amp;amp;lt; 0)
    text = &amp;quot;http://&amp;quot; + text;

    ui().browser.load(new QUrl(text));
}

private void onReloadClicked() {
    ui().browser.reload();
}

private void onStopClicked() {
    ui().browser.stop();
}

private void onUrlEditReturnPressed() {
    openURL();
}

private void onUrlChanged(QUrl url) {
    ui().urlEdit.setText(url.toString());
}

private void onLoadStarted() {
    ui().statusbar.showMessage(&amp;quot;Starting to load: &amp;quot; + ui().urlEdit.text());
}

private void onLoadDone() {
    ui().statusbar.showMessage(&amp;quot;Loading done...&amp;quot;);
}

private void onLoadProgress(int x) {
    ui().statusbar.showMessage(&amp;quot;Loading: &amp;quot; + x + &amp;quot; %&amp;quot;);
}

private void onClosed() {
    ui().browser.loadProgress.disconnect(this);
    ui().browser.loadFinished.disconnect(this);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the code above you have an exemple of a custom signal (QT&amp;#8217;s observer/observable pattern). Here is how it works : when &lt;code&gt;QMainWindow::closeEvent()&lt;/code&gt; is triggered by QT when the user closes the app, we then delegates the information to the WebController via the signal &lt;code&gt;WebView::closed&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;. For more details refer to &lt;a href=&#34;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-signalsandslots.html&#34;&gt;QT Jambi article on signals &amp;amp; slots&lt;/a&gt;.&lt;/li&gt; &lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;But wait a minute! Cool application use icons not text in the toolbar! Yes you can!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download these two images ( &lt;img style=&#34;width:32px&#34; src=&#34;https://davidonlaptop.github.io/davidlauzon.net/asset/2010/2/21/refresh32.png&#34; /&gt;, &lt;img style=&#34;width:32px&#34; src=&#34;https://davidonlaptop.github.io/davidlauzon.net/asset/2010/2/21/stop32.png&#34; /&gt;) and save them in a directory named &amp;#8220;images&amp;#8221; in your eclipse project.&lt;/li&gt;
&lt;li&gt;Next add your images directory in your classpath: Project &amp;gt; Properties &amp;gt; Java Build Path &amp;gt; Librairies &amp;gt; Add Class Folder = &amp;#8220;images&amp;#8221;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add set the icon manually in views/WebView.java :&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Read on the &lt;a href=&#34;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-resourcesystemoverview.html&#34;&gt;QT Resource system&lt;/a&gt; to understand how this works.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here you go! I hope this article will be usefull to someone!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://davidonlaptop.github.io/davidlauzon.net/asset/2010/2/21/JambiWeb.zip&#34;&gt;final source code for this application&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-hellowebkit-code.html&#34;&gt;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-hellowebkit-code.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-resourcesystem.html&#34;&gt;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-resourcesystem.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with QT Jambi on Linux</title>
      <link>https://davidonlaptop.github.io/davidlauzon.net/2010/01/getting-started-with-qt-jambi-on-linux/</link>
      <pubDate>Thu, 21 Jan 2010 14:04:09 +0000</pubDate>
      
      <guid>https://davidonlaptop.github.io/davidlauzon.net/2010/01/getting-started-with-qt-jambi-on-linux/</guid>
      <description>

&lt;p&gt;In this article I&amp;#8217;ll explain how to install QT Jambi and write your first Hello world program.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Installation of QT Jambi SDK&lt;/li&gt;
&lt;li&gt;Quick Overview of the SDK&lt;/li&gt;
&lt;li&gt;Integration with Eclipse&lt;/li&gt;
&lt;li&gt;Your first Jambi Program&lt;/li&gt;
&lt;li&gt;Jambi Links&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;installation-of-qt-jambi-sdk&#34;&gt;Installation of QT Jambi SDK&lt;/h2&gt;

&lt;p&gt;First, you need to download the &amp;#8220;Qt Jambi &amp;#8211; Java bindings Binaries&amp;#8221; for your OS (about 100MB), get it from� &lt;a href=&#34;http://qt.nokia.com/downloads&#34;&gt;here&lt;/a&gt;. Since I am using Ubuntu, the following instructions will be for Linux. You can extract the archive where you want, but remember the path because we&amp;#8217;ll need it later on &amp;#8211; I&amp;#8217;ll refer to ita s JAMBI_PATH (/usr/local/lib/qtjambi-linux32-lgpl-4.5.2_01 in this example).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar -xzf qtjambi-linux32-lgpl-4.5.2_01.tar.gz
sudo mv qtjambi-linux32-lgpl-4.5.2_01 /usr/local/lib/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we need to create a script to get QT Designer to generate .jui files for Java (instead QT/C++ .ui files). Name it jambi-designer.sh and insert the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd JAMBI_PATH
export CLASSPATH=`pwd`/qtjambi-4.5.2_01.jar:`pwd`/qtjambi-examples-4.5.2_01.jar:`pwd`/qtjambi-linux32-gcc-4.5.2_01.jar
export JAVADIR=/usr/lib/jvm/java-6-sun/jre
./designer.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make it executable and make it available in your path. Copy also the juic (jambi user interface compiler) which is used to convert the files generated by the Designer to java code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo chmod a+x jambi-designer.sh
sudo ln -s /JAMBI_PATH/jambi-designer.sh  /usr/local/bin/jambi-designer
cp bin/juic /usr/local/bin/
# try it :
jambi-designer  &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;quick-overview-of-the-sdk&#34;&gt;Quick Overview of the SDK&lt;/h2&gt;

&lt;p&gt;So here you go you got the SDK installed. Now what are these files, do i need to install this huge file on every computer my program will run unto?? Obviously not!&lt;/p&gt;

&lt;p&gt;Well here, you to remember that when you&amp;#8217;ll distribute your application, you&amp;#8217;ll need to bundle it with the Jambi core package (qtjambi-4.5.2_01.jar) and the jambi os-dependant package (qtjambi-linux32-gcc-4.5.2_01.jar). That&amp;#8217;s it!&lt;/p&gt;

&lt;p&gt;If you want the application to run on Windows as well, you only need to add one jar file per os (you&amp;#8217;ll need to download the whole sdk just to get the .jar your need for each os).&lt;/p&gt;

&lt;p&gt;What else am I getting?&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;
      Directory / file
    &lt;/th&gt;
    &lt;th&gt;
      Details
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      bin
    &lt;/td&gt;
    &lt;td&gt;
      Designer and UI Compiler binaries
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      com/trolltech/
    &lt;/td&gt;
    &lt;td&gt;
      Jambi Core &amp; Examples Source code
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      doc/
    &lt;/td&gt;
    &lt;td&gt;
      Jambi HTML Documentation (use your browser)
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      qtjambi.sh
    &lt;/td&gt;
    &lt;td&gt;
      Execute this script to view the numeros code samples
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&#34;https://davidonlaptop.github.io/davidlauzon.net/asset/2010/2/21/jambi_examples.jpg&#34; alt=&#34;&#34; width=&#34;442&#34; height=&#34;354&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;integration-with-eclipse&#34;&gt;Integration with Eclipse&lt;/h2&gt;

&lt;p&gt;So you want code auto-completion for Jambi classes in Eclipse? You&amp;#8217;re dreaming! Nope, actually you can! Just download the &amp;#8220;eclipse integration package&amp;#8221; and extract it in the plugin directory of your Eclipse installation.&lt;/p&gt;

&lt;p&gt;Note : I haven&amp;#8217;t been able to install the integration plugin with default Eclipse package in Kubuntu 9.10 because it does not allow you to add plugins as root. So to get around this, just uninstall it from the package manager and install it manually (get &lt;a href=&#34;http://www.eclipse.org/downloads/&#34;&gt;eclipse here&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar -xzf eclipse-java-galileo-SR1-linux-gtk.tar.gz
sudo mv eclipse /opt/eclipse-3.5.1
cd /opt/eclipse-3.5.1
sudo tar -xzf /path/to/qtjambi-eclipse-integration-linux32-4.5.2_01.tar.gz
./eclipse -clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next on Eclipse restart, go to Window &amp;gt; Preferences &amp;gt; QT Jambi Preference Page and use these settings :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jambi Location = where you installed the first archive (JAMBI_PATH)&lt;/li&gt;
&lt;li&gt;Generate files in separate folder = src/ui&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;your-first-jambi-program&#34;&gt;Your first Jambi Program&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Click on File &amp;gt; New &amp;gt; Other &amp;gt; QT Jambi Project.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a new class named &amp;#8220;HelloWorld&amp;#8221; and insert this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.trolltech.qt.gui.*;

public class HelloWorld extends QWidget{

    public static void main(String[] args) {
        // Instanciates a Jambi Application and pass it the command-line arguments to allow the QApplication
        // static instance to handle the arguments it recognizes, such as -font and -style.
        QApplication.initialize(args);

        // Creates an instance of our QWidget (could be also a QMainWindow, QDialog, etc.)
        // and set the parent to null
        HelloWorld helloWorld = new HelloWorld(null);

        // Create a new label and sets its parent to our view.
        QLabel label = new QLabel(&amp;quot;Ping World!&amp;quot;, helloWorld);

        // Show our view
        helloWorld.show();

        // Execute Jambi Application
        QApplication.exec();
    }

    public HelloWorld(QWidget parent){
        super(parent);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;jambi-links&#34;&gt;Jambi Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-index.html&#34;&gt;Jambi Documentation&lt;/a&gt; (&amp;#8220;Signals and Slots&amp;#8221; is a recommanded reading)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qt.nokia.com/doc/qtjambi-4.5.2_01/index.html&#34;&gt;Jambi Classes javadoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;file:///usr/local/lib/qtjambi-linux32-lgpl-4.5.2_01/doc/html/index.html&#34;&gt;file:///usr/local/lib/qtjambi-linux32-lgpl-4.5.2_01/doc/html/index.html&lt;/a&gt; (same as above but on your computer)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.trolltech.com/4.5/index.html&#34;&gt;C++ QT Documentation&lt;/a&gt; (the API is the same and sometimes you find more information than on Jambi)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.informit.com/articles/article.aspx?p=1405564&#34;&gt;Getting Started Article by Jasmin Blanchette&lt;/a&gt; (including a part on how to integrate C++ components with QT Jambi)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qt.nokia.com/doc/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-examples.html&#34;&gt;Jambi Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>